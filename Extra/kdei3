#!/bin/bash
while [[ ! "$yesnowifi" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want to connect to wifi? [y/n] : " yesnowifi && echo; done
case $yesnowifi in
	y|Y)
		echo "[ CONNECT TO WIFI ]"
		nmcli device wifi list
		echo
		read -p "Enter your wifi SSID: " ssid
		read -p "Enter your wifi password: " wifipass
		nmcli device wifi connect $ssid password $wifipass
		echo ;;
	n|N)
		echo
		echo "Continuing..."
		echo ;;
esac
echo "[ UPDATING SYSTEM ]"
sudo pacman -Syu --noconfirm
echo
echo "[ CONFIGURING TIMEDATECTL ]"
sudo timedatectl set-ntp true
#sudo timedatectl set-local-rtc 1 --adjust-system-clock
echo "----------------------------------------------------------------------"
echo "INSTALLING KDE"
echo "----------------------------------------------------------------------"
# Package Info: Don't reinstall|Don't Confirm (y/n)|Development Tools|Fast Updated Mirrors|Github|Terminal OS Info|Disk-Partition Utility             |KDE + i3               |Display Manager         |File Manager|Terminal|User Management|Bluetooth Management          |Power Management|Screen Management|Wallet Management         |KDE Connect     |KDE Info   |KDE RunAsRoot|GTK Management           |Screenshot|View Images|Applets: Network   Audio    |Default Home Directories|Chrome Integration        |Web Browser|Kvantum Theme Manager|Terminal Directory View|Extract (needed for grub theme)|Display Settings: randr|Latte Dock|Fonts: Monospace + System                    |Wallpaper|Output to log file.
sudo pacman -S  --needed        --noconfirm         base-devel        reflector            git    neofetch         partitionmanager gnome-disk-utility plasma-desktop i3-gaps  sddm sddm-kcm xorg-xinit dolphin ark  konsole  user-manager    bluedevil pulseaudio-bluetooth powerdevil       kscreen           kwallet-pam kwalletmanager kdeconnect sshfs kinfocenter kdesu         kde-gtk-config breeze-gtk spectacle  gwenview             plasma-nm plasma-pa xdg-user-dirs            plasma-browser-integration chromium    kvantum-qt5           tree                    unzip                           xorg-xrandr             latte-dock adobe-source-code-pro-fonts otf-san-francisco feh      #|& tee -a /home/$USER/log-kde-ARCH && echo "----------------------------------------------------------------------" >> log-kde-ARCH
# Not needed: Wallpapers (plasma-workspace-wallpapers) - Wallpapers aren't that good.
# Not needed: Monospace Font (ttf-hack) - Already included?
# Not needed: NTFS Support (ntfs-3g) - Better option?
echo
echo "[ INSTALLING PIKAUR: AN AUR HELPER ]"
git clone https://aur.archlinux.org/pikaur.git
cd pikaur
makepkg -fsri --noconfirm
cd /home/$USER
sudo rm -r pikaur
echo
echo "[ INSTALLING AUR PACKAGES ]"
# Package Info: Don't reinstall|Don't Confirm (y/n)|Browser Plugin for DRM|Text Editor     |Touchpad Gestures|AppImage Launcher|Flashfocus    |Compton(tryone)   
pikaur -S       --needed        --noconfirm         chromium-widevine      sublime-text-dev libinput-gestures appimagelauncher  flashfocus-git compton-tryone-git
# Not needed: AUR GUI Frontend (pamac-aur)
# Not needed: MacOS like Icon Theme (la-capitaine-icon-theme)
# Not needed: MacOS like Cursor Theme (capitaine-cursors)
# Not needed: 
echo
echo "[ CONFIGURING WINDOW MANAGER ]"
cat << EOT >> ~/.config/plasma-workspace/env/set_i3_as_window_manager.sh
export KDEWM=/usr/bin/i3
EOT
chmod +x ~/.config/plasma-workspace/env/set_window_manager.sh
echo
echo "[ MODIFYING i3 CONFIGURATION ]"
cat << EOT > ~/.i3/config
# >>> Plasma Integration <<<

# Try to kill the wallpaper set by Plasma (it takes up the entire workspace
# and hides everythiing)
exec --no-startup-id wmctrl -c Plasma
for_window [title="Desktop — Plasma"] kill; floating enable; border none

# Avoid tiling latte panel components
for_window [title="Latte Dock"] floating enable;

# Avoid tiling popups, dropdown windows from plasma
for_window [class="plasmashell"] floating enable
for_window [class="Plasma"] floating enable
for_window [class="krunner"] floating enable
for_window [class="Kmix"] floating enable
for_window [class="Klipper"] floating enable
for_window [class="Plasmoidviewer"] floating enable

# >>> Window Rules <<<

# >>> Avoid tiling for non-Plasma stuff <<<
for_window [window_role="pop-up"] floating enable
for_window [window_role="bubble"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [window_role="Preferences"] floating enable
for_window [window_role="About"] floating enable 
for_window [window_type="dialog"] floating enable
for_window [window_type="menu"] floating enable
for_window [title="Android Emulator"] floating enable #android emulator

#****************************************************************************

#	Keybinds

#****************************************************************************

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:SF Pro Text 9

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill


# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10

# Open specific applications in floating mode
for_window [class="(?i)virtualbox"] floating enable border normal

# switch to workspace with urgent window automatically
for_window [urgent=latest] focus

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

# rofi
bindsym $mod+d exec rofi -show drun

#flash current window
bindsym $mod+n exec --no-startup-id flash_window

#*********************************************************************************

#	Startup

#********************************************************************************

exec --no-startup-id feh --bg-scale ~/Documents/background.JPG
exec --no-startup-id compton --config ~/.config/compton/compton.conf
exec --no-startup-id m 26/10 4
exec --no-startup-id conky -c ~/.config/conky/conkyrc
exec --no-startup-id latte-dock %u
exec --no-startup-id redshift-gtk
exec_always --no-startup-id flashfocus

#********************************************************************************

#	Appearance

#********************************************************************************

# Theme colors
# class                   border  backgr. text    indic.   child_border
client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577
client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a
client.unfocused        #333333 #222222 #888888 #292d2e   #222222
client.urgent           #2f343a #900000 #ffffff #900000   #900000
client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c

# Configure border style <normal|1pixel|pixel xx|none|pixel>
new_window none
new_float normal

# Hide borders
hide_edge_borders none

# change borders
bindsym $mod+y border none
bindsym $mod+u border pixel 1
bindsym $mod+i border normal


#############################
### settings for i3-gaps: ###
#############################

# Set inner/outer gaps
gaps inner 15
gaps outer 5

# Activate smart borders (always)
smart_borders on
EOT
echo
echo "[ ENABLING DISPLAY MANAGER ]"
sudo systemctl enable sddm
echo
echo "[ ENABLING BLUETOOTH ]"
sudo systemctl enable bluetooth
echo
echo "[ CUSTOMIZING TOUCHPAD GESTURES ]"
cp /etc/libinput-gestures.conf ~/.config/
sed -i '/^#/!s/\(.*\)/# \1/g' ~/.config/libinput-gestures.conf
cat << EOT >> /home/$USER/.config/libinput-gestures.conf
#
# Go to workspace left
gesture swipe right 3 xdotool set_desktop --relative -- -1
# Go to workspace right
gesture swipe left 3 xdotool set_desktop --relative 1
# Go forward
gesture swipe up 3 xdotool key alt+Right
# Go back
gesture swipe down 3 xdotool key alt+Left
# Open applications view
gesture swipe left_up 3 xdotool key alt+F1
# Toggle maximize window
gesture swipe right_up 3 xdotool key super+Page_Up
# Open windows overview
gesture swipe left_down 3 xdotool key ctrl+F9
# Open workspaces grid view
gesture swipe right_down 3 xdotool key ctrl+F8
# Tile window to the right
gesture pinch clockwise 2 xdotool key super+Right
# Tile window to the left
gesture pinch anticlockwise 2 xdotool key super+Left
EOT
echo
echo "[ ADDING USER TO 'INPUT' GRPUP ]"
sudo gpasswd -a $USER input
echo
echo "[ SETTING APPS TO AUTOSTART ]"
libinput-gestures-setup autostart
mkdir /home/$USER/.config/autostart
echo
echo "----------------------------------------------------------------------"
echo "SETTING UP POST INSTALL SCRIPT TO RUN AFTER REBOOT"
echo "----------------------------------------------------------------------"
cat << EOT >> /home/$USER/.config/autostart/runkdei3postinstall.desktop
[Desktop Entry]
Type=Application
Version=1.0
Name=kdepostinstall
Exec=/home/$USER/kdei3postinstall
Terminal=true
EOT
chmod +x /home/$USER/.config/autostart/runkdei3postinstall.desktop
echo
echo "----------------------------------------------------------------------"
echo "REBOOTING"
echo "----------------------------------------------------------------------"
sudo reboot