#!/bin/bash
set -o pipefail
IFS=$'\n\t'

# Functions

configWiFi() {
	while [[ ! "$connectWiFi" =~ ^[yYnN]$ ]]; do read -n1 -rp "Connect to WiFi? [y/n] : " connectWiFi && echo; done
	case "$connectWiFi" in
		y|Y )
			nmcli device wifi list
			echo
			read -rp "Enter WiFi SSID : " wifiSSID
			read -rp "Enter Wifi PASS : " wifiPASS
			nmcli device wifi connect "$wifiSSID" password "$wifiPASS";;
		n|N )
			echo "Skipping..."
			echo;;
	esac
}

systemUpdate() {
	sudo pacman -Syu --noconfirm
}

updateSysClock() {
	sudo timedatectl set-ntp true
}

installPacmanPackages() {
	# Package Info: | Disk Partition Utilities    | KDE            | Display Manager              | File Manager  |Dialog Viewer|Custom Shortcuts|Terminal |User Management| Bluetooth Management             |Power Management|Screen Management|Thunderbolt Management|Wallet Management             |KDE Connect         |KDE Info     |KDE RunAsRoot|GTK Management               |Screenshot |View Images|Network + Audio Applets|Default Home Directories|XDG QT Backend          |Software GUI: Arch + Flatpak + Firmware      |Chrome Integration          |Web Browser|Extract|Display Settings|Latte Dock  |SysInfo   |Torrent      |PDF View|Media|Android Tools: adb fastboot   |App Menu|
	pacmanPackages=('gnome-disk-utility' 'gparted' 'plasma-desktop' 'sddm' 'sddm-kcm' 'xorg-xinit' 'dolphin' 'ark' 'kdialog'     'khotkeys'       'konsole' 'user-manager'  'bluedevil' 'pulseaudio-bluetooth' 'powerdevil'     'kscreen'         'plasma-thunderbolt'   'kwallet-pam' 'kwalletmanager' 'kdeconnect' 'sshfs' 'kinfocenter' 'kdesu'       'kde-gtk-config' 'breeze-gtk' 'spectacle' 'gwenview'  'plasma-nm' 'plasma-pa' 'xdg-user-dirs'          'xdg-desktop-portal-kde' 'discover' 'packagekit-qt5' 'fwupd' 'flatpak' 'plasma-browser-integration' 'chromium'  'unzip' 'xorg-xrandr'    'latte-dock' 'neofetch' 'qbittorrent' 'okular' 'vlc' 'android-tools' 'android-udev' 'rofi')
	sudo pacman -S --needed --noconfirm "${pacmanPackages[@]}"
}

installPikaur() {
	cd /home/"$USER" || return
	git clone https://aur.archlinux.org/pikaur.git
	cd pikaur || return
	makepkg -fsri --noconfirm
	cd /home/"$USER" || return
	sudo rm -r pikaur
}

installPikaurPackages() {
	# Package Info: |Browser Plugin for DRM|Touchpad Gestures  |gDrive  |Windows Hello for Linux|
	pikaurPackages=('chromium-widevine'     'libinput-gestures' 'insync' 'howdy')
	pikaur -S --needed --noconfirm "${pikaurPackages[@]}"
}

enableDisplayManager() {
	sudo systemctl enable sddm
}

enableBluetooth() {
	sudo systemctl enable bluetooth
}

enableSystemctlServices() {
	enableDisplayManager
	enableBluetooth
}

configTouchpadGestures() {
	mkdir -p /home/"$USER"/.config
	touch /home/"$USER"/.config/libinput-gestures.conf
	wget -P /home/"$USER"/.config https://raw.githubusercontent.com/customlinux/files/master/configs/libinput-gestures/KDE4PointTouch
	mv /home/"$USER"/.config/KDE4PointTouch /home/"$USER"/.config/libinput-gestures.conf
}

addGroupInputUser() {
	sudo gpasswd -a "$USER" input
}

enableAutostart() {
	libinput-gestures-setup autostart
	mkdir -p /home/"$USER"/.config/autostart
}

configDisplayManager() {
	sddmConf="$(cat <<-EOT

		[X11]
		DisplayCommand=/usr/share/sddm/scripts/Xsetup

	EOT
	)"

	echo "$sddmConf" | sudo tee -a /etc/sddm.conf # > /dev/null
}

configDisplayManagerTouchpad() {
	sudo touch /etc/X11/xorg.conf.d/20-touchpad.conf
	xorgConfTouchpad="$(cat <<-EOT
		Section "InputClass"
			Identifier "libinput touchpad catchall"
			MatchIsTouchpad "on"
			MatchDevicePath "/dev/input/event*"
			Driver "libinput"

			Option "Tapping" "on"
			Option "ClickMethod" "clickfinger"
			Option "NaturalScrolling" "true"
			Option "ScrollMethod" "twofinger"
			Option "DisableWhileTyping" "true"
		EndSection
	EOT
	)"

	echo "$xorgConfTouchpad" | sudo tee -a /etc/X11/xorg.conf.d/20-touchpad.conf # > /dev/null
}

configHowdy() {
	howdyConfigFileDir="/lib/security/howdy/"
	howdyConfigFileName="config.ini"
	sudo sed -i "s|detection_notice = false|detection_notice = true|g" "$howdyConfigFileDir""$howdyConfigFileName"
	sudo sed -i "s|no_confirmation = false|no_confirmation = true|g" "$howdyConfigFileDir""$howdyConfigFileName"
	sudo sed -i "s|certainty = 3.5|certainty = 4.5|g" "$howdyConfigFileDir""$howdyConfigFileName"
	sudo sed -i "s|device_path = none|device_path = /dev/video2|g" "$howdyConfigFileDir""$howdyConfigFileName"
	sudo sed -i "s|dark_threshold = 50|dark_threshold = 100|g" "$howdyConfigFileDir""$howdyConfigFileName"
	
	addHowdyFaceModel() { sudo howdy list; sudo howdy add;}
	
	while [[ ! "$irFaceModels" =~ ^[123456789]$ ]]; do read -n1 -rp "How many IR Face Models do you want to create? [1-9] : " irFaceModels && echo; done
	while [[ "$irFaceModels" -gt 0 ]]; do addHowdyFaceModel; irFaceModels=$(($irFaceModels-1)); echo; done
	
	addHowdyPAM() { sudo sed -i "s|#%PAM-1.0|#%PAM-1.0\n\nauth sufficient pam_python.so /lib/security/howdy/pam.py\n|g" /etc/pam.d/"$1";}
	addHowdyPAM "sudo"
	addHowdyPAM "kde"
	addHowdyPAM "sddm"
	addHowdyPAM "su"
	addHowdyPAM "login"
	addHowdyPAM "polkit-1"
	addHowdyPAM "system-auth"
	
	sudo chmod -R 755 /lib/security/howdy # Temporary Fix: https://github.com/boltgolt/howdy/issues/219
}

autostartKdePostInstallScript() {
	postInstallAutostart="$(cat <<-EOT
	[Desktop Entry]
	Type=Application
	Version=1.0
	Name=kdepostinstall
	Exec=/home/"$USER"/kdepostinstall
	Terminal=true
	EOT
	)"

	echo "$postInstallAutostart" > /home/"$USER"/.config/autostart/runkdepostinstall.desktop
	chmod +x /home/"$USER"/.config/autostart/runkdepostinstall.desktop
}

rebootSystem() {
	while [[ ! "$yesnoreboot" =~ ^[yYnN]$ ]]; do read -n1 -rp "Reboot: (y/n) : " yesnoreboot && echo; done
	case "$yesnoreboot" in
		y|Y )
			sudo reboot;;
		n|N )
			echo
			echo "Reboot  : reboot"
			echo
			exit 0;;
	esac
}

# Install

configWiFi
systemUpdate
updateSysClock
installPacmanPackages
installPikaur
installPikaurPackages
enableSystemctlServices
configTouchpadGestures
addGroupInputUser
enableAutostart
configDisplayManager
configDisplayManagerTouchpad
configHowdy
autostartKdePostInstallScript
rebootSystem
