#!/bin/bash
echo "----------------------------------------------------------------------"
echo "CHECK IF SCRIPT IS RUNNING AS ROOT"
echo "----------------------------------------------------------------------"
if [[ $EUID -ne 0 ]]
then
	echo "You must be a root user to run this." 2>&1
	exit 1
else
	echo "Script is being run as root."
	echo
fi
echo "----------------------------------------------------------------------"
echo "CHECK IF SYSTEM IS BOOTED IN EFI MODE"
echo "----------------------------------------------------------------------"
efivar --list
echo
echo "[ IF A DIRECTORY EXISTS, PRESS 'ENTER' TO CONTINUE ]"
read
echo "----------------------------------------------------------------------"
echo "UPDATE SYSTEM CLOCK"
echo "----------------------------------------------------------------------"
timedatectl set-ntp true
echo "----------------------------------------------------------------------"
echo "PARTITION THE DRIVE"
echo "----------------------------------------------------------------------"
fdisk -l
echo
lsblk
echo
echo "[ CFDISK - PRESS 'ENTER' TO CONTINUE ]"
read
cfdisk /dev/nvme0n1
fdisk -l
echo
lsblk
echo
echo "----------------------------------------------------------------------"
echo "INPUT VARIABLE VALUES"
echo "----------------------------------------------------------------------"
read -p "efipartition # (/dev/nvme0n1p#) = /dev/nvme0n1p" efipartition
echo
read -p "ospartition # (/dev/nvme0n1p#) = /dev/nvme0n1p" ospartition
echo
read -p "Enter hostname: " hostname
echo
read -p "Enter username: " username
echo
read -rp "Enter user password: " userpass
echo
read -rp "Enter root password: " rootpass
echo
echo "----------------------------------------------------------------------"
echo "FORMAT + MOUNT [/] & [efi] PARTITIONS"
echo "----------------------------------------------------------------------"
#
fdisk -l
echo
echo "Press 'Enter' to continue..."
echo
read
#
mkfs.ext4 /dev/nvme0n1p$ospartition
echo
mkfs.fat -F32 /dev/nvme0n1p$efipartition
echo
mount /dev/nvme0n1p$ospartition /mnt
echo
mkdir -p /mnt/boot
mount /dev/nvme0n1p$efipartition /mnt/boot
echo
echo "----------------------------------------------------------------------"
echo "INSTALL REFLECTOR AND UPDATE MIRRORLIST"
echo "----------------------------------------------------------------------"
pacman -S --needed --noconfirm reflector
reflector --verbose -l 100 -a 24 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist
echo "----------------------------------------------------------------------"
echo "PACSTRAP - BASE + BASE-DEVEL"
echo "----------------------------------------------------------------------"
# Packages:   Base Utils     |Kernels        |Firmware      |Root|Text|Tree|Ext 2 3 4|WiFi          |exFat      |NTFS   |Microcode  |xInput     |Mirrors  |Download
pacstrap /mnt base base-devel linux linux-lts linux-firmware sudo tree nano e2fsprogs networkmanager exfat-utils ntfs-3g intel-ucode xorg-xinput reflector wget git
echo
echo "----------------------------------------------------------------------"
echo "GENERATE FSTAB"
echo "----------------------------------------------------------------------"
genfstab -U /mnt >> /mnt/etc/fstab
echo
cat /mnt/etc/fstab
echo "---------------------------------------------------------------------"
echo "   __                 ___       __                                   "
echo "  |__| |  | |\ | |\ |  |  |\ | | _   _   _   _                       "
echo "  | \  |__| | \| | \| _|_ | \| |__| |_| |_| |_|                      "
echo "   _______    _     _    _______    _______    _______    _______    "
echo "  |  _____|  | |   | |  |  ___  |  |  ___  |  |  ___  |  |__   __|   "
echo "  | |        | |___| |  | |___| |  | |   | |  | |   | |     | |      "
echo "  | |        |  ___  |  |  _____|  | |   | |  | |   | |     | |      "
echo "  | |_____   | |   | |  | |  \ \   | |___| |  | |___| |     | |      "
echo "  |_______|  |_|   |_|  |_|   \_\  |_______|  |_______|     |_|      "
echo "---------------------------------------------------------------------"
echo
echo "[ SET TIMEZONE TO US-PACIFIC ]"
#arch-chroot /mnt curl https://ipapi.co/timezone | timedatectl set-timezone
arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Vancouver /etc/localtime
echo
echo "[ GENERATE /etc/adjtime ]"
arch-chroot /mnt hwclock --systohc --utc
echo
echo "[ SET LOCALE TO en_US.UTF-8 UTF-8 FOR CANADIAN-ENGLISH ]"
sed -i 's/^#en_CA.UTF-8 UTF-8/en_CA.UTF-8 UTF-8/g' /mnt/etc/locale.gen
echo
echo "[ GENERATE LOCALE ]"
arch-chroot /mnt locale-gen
echo
echo "[ SET LANG VARIABLE TO LANG=en_CA.UTF-8 ]"
echo "LANG=en_CA.UTF-8" > /mnt/etc/locale.conf
echo
echo "[ SET HOSTNAME ]"
echo $hostname > /mnt/etc/hostname
echo
echo "[ SET ROOT PASSWORD ]"
arch-chroot /mnt sh -c "echo 'root:$rootpass' | chpasswd"
echo
echo "[ INSTALL SYSTEMD-BOOT TO /boot ]"
echo
arch-chroot /mnt bootctl --path=/boot install
echo
arch-chroot /mnt mkdir -p /etc/pacman.d/hooks
arch-chroot /mnt touch /etc/pacman.d/hooks/systemd-boot.hook
arch-chroot /mnt cat /etc/pacman.d/hooks/systemd-boot.hook
cat << EOT > /mnt/etc/pacman.d/hooks/systemd-boot.hook
[Trigger]
Type = Package
Operation = Upgrade
Target = systemd

[Action]
Description = Updating systemd-boot
When = PostTransaction
Exec = /usr/bin/bootctl update
EOT
echo
echo "[ CONFIGURE SYSTEMD-BOOT ]"
echo "/boot/loader/loader.conf"
arch-chroot /mnt touch /boot/loader/loader.conf
arch-chroot /mnt cat /boot/loader/loader.conf
cat << EOT > /mnt/boot/loader/loader.conf
default arch
timeout 0
console-mode max
auto-entries 1
auto-firmware 1
EOT
echo
echo "/boot/loader/entries/arch.conf"
arch-chroot /mnt touch /boot/loader/entries/arch.conf
arch-chroot /mnt cat /boot/loader/entries/arch.conf
rootpartuuid=$(blkid -s PARTUUID -o value /dev/nvme0n1p$ospartition)
cat << EOT > /mnt/boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options root=PARTUUID=$rootpartuuid rw
EOT
echo
echo "/boot/loader/entries/archlts.conf"
arch-chroot /mnt touch /boot/loader/entries/archlts.conf
arch-chroot /mnt cat /boot/loader/entries/archlts.conf
rootpartuuid=$(blkid -s PARTUUID -o value /dev/nvme0n1p$ospartition)
cat << EOT > /mnt/boot/loader/entries/archlts.conf
title Arch Linux LTS
linux /vmlinuz-linux-lts
initrd /intel-ucode.img
initrd /initramfs-linux-lts.img
options root=PARTUUID=$rootpartuuid rw
EOT
echo
echo "[ ENABLE NETWORK MANAGER ]"
arch-chroot /mnt systemctl enable NetworkManager
echo
echo "[ CREATE USER WITH ADMINISTRATOR PRIVILIGES ]"
arch-chroot /mnt useradd -m -g users -G wheel -s /bin/bash $username
echo
echo "[ SET USER PASSWORD ]"
arch-chroot /mnt sh -c "echo '$username:$userpass' | chpasswd"
echo
echo "[ SET ADMINISTRATOR PRIVILIGES ]"
sed -i 's/^# %wheel ALL=(ALL) ALL/ %wheel ALL=(ALL) ALL/g' /mnt/etc/sudoers
echo
echo "----------------------------------------------------------------------"
echo "FINISH INSTALL: MOVE DE FILES TO /mnt + REMOVE EXTRA FILES"
echo "----------------------------------------------------------------------"
cp /root/arch/install/*{gnome,kde,xfce,budgie,bedrock}* /mnt/home/$username
chmod +x /mnt/home/$username/*
rm -r /root/arch
echo
echo "[ UNMOUNT & REBOOT ]"
echo
umount -R /mnt
reboot
