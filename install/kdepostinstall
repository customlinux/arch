#!/bin/bash
while [[ ! "$yesnodisplaysettings" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want configure the display settings? [y/n] : " yesnodisplaysettings && echo; done
case $yesnodisplaysettings in
	y|Y)
		mkdir -p /home/$USER/myScripts
		wget -P /home/$USER/myScripts https://raw.githubusercontent.com/customlinux/files/master/scripts/displaySetup.sh
		chmod +x /home/$USER/myScripts/displaySetup.sh
		/home/$USER/myScripts/displaySetup.sh
		sudo touch /usr/share/sddm/scripts/Xsetup
		sudo bash -c 'echo "/home/replaceWithUserNameXsetup/myScripts/displaySetup.sh" >> /usr/share/sddm/scripts/Xsetup'
		echo ;;
	n|N)
		echo "Skipping..."
		echo ;;
esac
while [[ ! "$yesnoautomountpartitions" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want to automount any partitions at startup? [y/n] : " yesnoautomountpartitions && echo; done
case $yesnoautomountpartitions in
	y|Y)
		gnome-disks
		echo ;;
	n|N)
		echo "Skipping..."
		echo ;;
esac
echo "------------------------------------------------------------------------------------------------"
echo " INSTALLING LATTE APPLETS + CUSTOM LAYOUTS + SOME PACKAGES"
echo "------------------------------------------------------------------------------------------------"
echo
# Window Title: https://github.com/psifidotos/applet-window-title
sudo pacman -S --needed --noconfirm kdeclarative
git clone https://github.com/psifidotos/applet-window-title.git
cd applet-window-title
plasmapkg2 -i .
cd ..
sudo rm -r applet-window-title
# Window Appmenu: https://github.com/psifidotos/applet-window-appmenu
sudo pacman -S --needed --noconfirm qt5-quickcontrols xcb-util xorg-xrandr extra-cmake-modules plasma-framework kwindowsystem appmenu-gtk-module libdbusmenu-gtk3
git clone https://github.com/psifidotos/applet-window-appmenu.git
cd applet-window-appmenu
sh install.sh
cd ..
sudo rm -r applet-window-appmenu
# Window Buttons: https://github.com/psifidotos/applet-window-buttons
sudo pacman -S --needed --noconfirm kcoreaddons kdeclarative plasma-framework extra-cmake-modules
git clone https://github.com/psifidotos/applet-window-buttons.git
cd applet-window-buttons
sh install.sh
cd ..
sudo rm -r applet-window-buttons
echo
# Custom Latte Layout
wget -P /home/$USER/.config/latte https://raw.githubusercontent.com/customlinux/files/master/configs/LatteDock.layout.latte
echo
# Sublime Text Editor
curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
sudo pacman -Syu --noconfirm sublime-text
echo
echo "------------------------------------------------------------------------------------------------"
echo " CONFIGURING MISCELLANEOUS SETTINGS"
echo "------------------------------------------------------------------------------------------------"
echo
echo "[ 'SUPER' KEY KRUNNER TOGGLE ]"
mkdir -p /home/$USER/myScripts
krunner_toggle="/home/$USER/myScripts/krunnerToggle.sh"
touch $krunner_toggle
cat << 'EOT' >> $krunner_toggle
#!/bin/bash
krunnerWindow=$(xdotool getwindowfocus getwindowname)
if [[ $krunnerWindow == *"krunner"* ]]; then
	xdotool key 'Escape'
	exit 0
else
	qdbus org.kde.krunner /App display
	exit 0
fi
EOT
chmod +x $krunner_toggle
echo
echo "Follow the instructions below to create a custom global shortcut for KRunner."
echo
echo "System Settings > Shortcuts > Custom Shortcuts > Edit > New > Global Shortcut > Command/URL"
echo "Name    : KRunner Toggle"
echo "Comment : Run a script to get 'toggle' ability for KRunner."
echo "Trigger : Ctrl+Alt+Shift+K"
echo "Action  : /home/$USER/myScripts/krunnerToggle.sh"
echo "Hit 'Apply' to SAVE CHANGES and CLOSE settings."
echo
echo "Press 'Enter' to open settings..."
read
systemsettings5 > /dev/null 2>&1
echo
echo "Press 'Enter' to continue..."
read
krunner_Script_Shortcut_Uuid=$(grep -A 2 Ctrl+Alt+Shift+K /home/$USER/.config/khotkeysrc | grep 'Uuid=' | grep -o '{.*}')
kwriteconfig5 --file ~/.config/kwinrc --group ModifierOnlyShortcuts --key Meta "org.kde.kglobalaccel,/component/khotkeys,org.kde.kglobalaccel.Component,invokeShortcut,$krunner_Script_Shortcut_Uuid"
qdbus org.kde.KWin /KWin reconfigure
echo
echo "[ CHROMIUM FLAGS ]"
chromium_flags="/home/$USER/.config/chromium-flags.conf"
touch $chromium_flags
cat << EOT >> $chromium_flags
# This line will be ignored.
# --password-store=<basic|gnome|kwallet>
#--flag-switches-begin
--enable-smooth-scrolling
--enable-features=OverlayScrollbar,ParallelDownloading,SecurityInterstitialsDarkMode
#AutomaticPasswordGeneration,FocusMode,UsernameFirstFlow,google-password-manager
#--flag-switches-end
EOT
echo
echo "[ GIT SETTINGS ]"
git config --global core.editor "subl -n -w"
git config --global credential.helper 'cache --timeout=1800'
git config --global core.autocrlf input
echo
echo "[ PACMAN HOOKS - REFLECTOR ]"
sudo mkdir -p /etc/pacman.d/hooks
sudo touch /etc/pacman.d/hooks/reflectorMirrorlistUpdate.hook
sudo bash -c 'cat << EOT > /etc/pacman.d/hooks/reflectorMirrorlistUpdate.hook
[Trigger]
Operation = Upgrade
Type = Package
Target = pacman-mirrorlist

[Action]
Description = Updating pacman-mirrorlist with reflector and removing pacnew...
When = PostTransaction
Depends = reflector
Exec = /bin/sh -c "reflector -l 100 -a 24 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew"
EOT'
echo
echo "------------------------------------------------------------------------------------------------"
echo "REMOVE EXTRA SOFTWARE / FILES"
echo "------------------------------------------------------------------------------------------------"
echo
sudo pacman -Rns --noconfirm gnome-disk-utility
echo
sudo mkdir -p /home/$USER/Documents/Arch-Install
sudo mv /home/$USER/*{gnome,kde,xfce,budgie,bedrock}* /home/$USER/Documents/Arch-Install
sudo mv /home/$USER/.config/autostart/run*postinstall.desktop /home/$USER/Documents/Arch-Install
echo
echo "[ Installation scripts have been moved into directory '/home/$USER/Documents/Arch-Install'. ]"
echo
echo "[ OPTIONAL: Run /home/$USER/Documents/Arch-Install/kdecustomsettings to enable custom settings. ]"
echo
echo "[ PRESS 'ENTER' TO REBOOT ]"
echo
read
sudo reboot
