#!/bin/bash
while [[ ! "$yesnorunpostinstallscript" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want to run this post install script right now? [y/n] : " yesnorunpostinstallscript && echo; done
case $yesnorunpostinstallscript in
	y|Y)
		echo "Continuing..."
		echo ;;
	n|N)
		echo "Exiting..."
		exit 0 ;;
esac
while [[ ! "$yesnoautomountpartitions" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want to automount any partitions at startup? [y/n] : " yesnoautomountpartitions && echo; done
case $yesnoautomountpartitions in
	y|Y)
		gnome-disks
		echo ;;
	n|N)
		echo "Skipping..."
		echo ;;
esac
while [[ ! "$yesnodisplaysettings" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want configure the display settings? [y/n] : " yesnodisplaysettings && echo; done
case $yesnodisplaysettings in
	y|Y)
		mkdir -p /home/$USER/myScripts
		wget -P /home/$USER/myScripts https://raw.githubusercontent.com/customlinux/files/master/scripts/displaySetup.sh
		chmod +x /home/$USER/myScripts/displaySetup.sh
		/home/$USER/myScripts/displaySetup.sh
		echo ;;
	n|N)
		echo "Skipping..."
		echo ;;
esac
while [[ ! "$yesnoinstallsublime" =~ ^[yYnN]$ ]]; do read -n1 -p "Do you want to install sublime text editor? [y/n] : " yesnoinstallsublime && echo; done
case $yesnoinstallsublime in
	y|Y)
		curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
		echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
		sudo pacman -Syu --noconfirm sublime-text
		echo ;;
	n|N)
		echo "Skipping..."
		echo ;;
esac
echo "------------------------------------------------------------------------------------------------"
echo " INSTALLING LATTE WINDOW APPLETS"
echo "------------------------------------------------------------------------------------------------"
echo
# Window Title: https://github.com/psifidotos/applet-window-title
sudo pacman -S --needed --noconfirm kdeclarative
git clone https://github.com/psifidotos/applet-window-title.git
cd applet-window-title
plasmapkg2 -i .
cd ..
sudo rm -r applet-window-title
# Window Appmenu: https://github.com/psifidotos/applet-window-appmenu
sudo pacman -S --needed --noconfirm qt5-quickcontrols xcb-util xorg-xrandr extra-cmake-modules plasma-framework kwindowsystem appmenu-gtk-module libdbusmenu-gtk3
git clone https://github.com/psifidotos/applet-window-appmenu.git
cd applet-window-appmenu
sh install.sh
cd ..
sudo rm -r applet-window-appmenu
# Window Buttons: https://github.com/psifidotos/applet-window-buttons
sudo pacman -S --needed --noconfirm kcoreaddons kdeclarative plasma-framework extra-cmake-modules
git clone https://github.com/psifidotos/applet-window-buttons.git
cd applet-window-buttons
sh install.sh
cd ..
sudo rm -r applet-window-buttons
echo
echo "------------------------------------------------------------------------------------------------"
echo " CONFIGURING MISCELLANEOUS SETTINGS"
echo "------------------------------------------------------------------------------------------------"
echo
echo "[ CHROMIUM FLAGS ]"
chromium_flags="/home/$USER/.config/chromium-flags.conf"
touch $chromium_flags
cat << EOT >> $chromium_flags
# This line will be ignored.
# --password-store=<basic|gnome|kwallet>
--flag-switches-begin
--enable-dom-distiller
--enable-smooth-scrolling
--enable-features=AutomaticPasswordGeneration,FocusMode,OverlayScrollbar,ParallelDownloading,SecurityInterstitialsDarkMode,UsernameFirstFlow,google-password-manager
--flag-switches-end
EOT
echo
echo "[ GIT SETTINGS ]"
echo
git config --global core.editor "subl3 -n -w"
git config --global credential.helper 'cache --timeout=1800'
git config --global core.autocrlf input
echo
echo "[ PACMAN MIRRORLIST - REFLECTOR ]"
sudo touch /etc/pacman.d/hooks/mirrorupgrade.hook
sudo bash -c 'cat << EOT > /etc/pacman.d/hooks/mirrorupgrade.hook
[Trigger]
Operation = Upgrade
Type = Package
Target = pacman-mirrorlist

[Action]
Description = Updating pacman-mirrorlist with reflector and removing pacnew...
When = PostTransaction
Depends = reflector
Exec = /bin/sh -c "reflector -l 100 -a 24 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew"
EOT'
echo
echo "[ ROOT - USR - SHARE - SDDM - SCRIPTS - XSETUP ]"
sudo touch /usr/share/sddm/scripts/Xsetup
sudo bash -c 'cat << EOT >> /usr/share/sddm/scripts/Xsetup
/home/replaceWithUserNameXsetup/myScripts/displaySetup.sh
EOT'
echo
echo "[ KSYSGUARD - SYSTEMLOAD ]"
wget -P /home/$USER/myScripts https://raw.githubusercontent.com/customlinux/files/master/scripts/ksysguardCustomSystemload
sed -i "s/replaceWithUserNameKsysguard/$USER/g" /home/$USER/myScripts/ksysguardCustomSystemload
chmod +x /home/$USER/myScripts/ksysguardCustomSystemload
/home/$USER/myScripts/ksysguardCustomSystemload
sudo touch /etc/pacman.d/hooks/ksysguardsystemloadupgrade.hook
sudo bash -c 'cat << EOT > /etc/pacman.d/hooks/ksysguardsystemloadupgrade.hook
[Trigger]
Operation = Upgrade
Type = Package
Target = ksysguard
[Action]
Description = Updating systemload2.sgrd with custom settings...
When = PostTransaction
Exec = /bin/sh -c "/home/replaceWithUserNameKsysguardSystemloadUpgradeHook/myScripts/ksysguardCustomSystemload"

EOT'
echo
echo "------------------------------------------------------------------------------------------------"
echo "REMOVE EXTRA SOFTWARE / FILES"
echo "------------------------------------------------------------------------------------------------"
echo
sudo pacman -Rns --noconfirm gnome-disk-utility
echo
sudo mkdir -p /home/$USER/Documents/Arch-Install
sudo mv /home/$USER/*{gnome,kde,xfce,budgie,bedrock}* /home/$USER/Documents/Arch-Install
sudo mv /home/$USER/.config/autostart/run*postinstall.desktop /home/$USER/Documents/Arch-Install
echo
echo "[ Installation scripts have been moved into directory '/home/$USER/Documents/Arch-Install'. ]"
echo
echo "[ ( OPTIONAL ) Run /home/$USER/Documents/Arch-Install/kdecustomsettings to enable custom settings. ]"
echo
echo "[ PRESS 'ENTER' TO REBOOT ]"
echo
read
sudo reboot
