#!/bin/bash
set -uo nounset pipefail
IFS=$'\n\t'

# Variables
rootMountDir="/mnt"
efiMountDir="/boot"
myTimeZone="America/Vancouver"
myLocale="en_CA"
myLocaleFallback="en_US"
hardDiskDrive="sda"
solidStateDrive="nvme0n1p"

# Functions

scriptRoot() {
	case "$EUID" in
		0 )
			echo "Script is being run as root.";;
		* )
			echo "Script is NOT being run as root." 2>&1
			exit 1;;
	esac
}

efiBoot() {
	efivar --list
	efiVarDir="1"
	[[ -d /sys/firmware/efi/efivars ]] && efiVarDir="0"
	case "$efiVarDir" in
		0 )
			echo "System is booted in efi mode.";;
		1 )
			echo "Directory NOT found: /sys/firmware/efi/efivars"
			exit 1;;
	esac
}

updateSysClock() {
	timedatectl set-ntp true
}

statusDrivePart() {
	fdisk -l
	lsblk
}

ssdHdd() {
	rotational=$(cat /sys/block/sda/queue/rotational)
	case "$rotational" in
		0 )
			drive="$solidStateDrive";;
		1 )
			drive="$hardDiskDrive";;
	esac
}

partitionDrive() {
	statusDrivePart
	echo "Press 'Enter' to continue."
	read -r
	cfdisk /dev/"${drive//p}"
}

inputVariables() {
	statusDrivePart
	read -rp "efipartition # /dev/$drive# : " efipartition
	read -rp "ospartition  # /dev/$drive# : " ospartition
	read -rp "Enter hostname              : " hostname
	read -rp "Enter username              : " username
	read -rp "Enter user password         : " userpass
	read -rp "Enter root password         : " rootpass
}

formatEfiRoot() {
	statusDrivePart
	while [[ ! "$yesnoformatefi" =~ ^[yYnN]$ ]]; do read -n1 -rp "Format efi partition: (y/n) : " yesnoformatefi && echo; done
	case "$yesnoformatefi" in
		y|Y )
			mkfs.fat -F32 /dev/"$drive""$efipartition";;
		n|N )
			echo "Skipping...";;
	esac
	mkfs.ext4 /dev/"$drive""$ospartition"
}

mountEfiRoot() {
	mount /dev/"$drive""$ospartition" "$rootMountDir"
	mkdir -p "$rootMountDir""efiMountDir"
	mount /dev/"$drive""$efipartition" "$rootMountDir""$efiMountDir"
}

pacmanCustom() {
	sed -i "s/PKGEXT='.pkg.tar.xz'/PKGEXT='.pkg.tar'/g" "$1"etc/makepkg.conf
	sed -i "s/SRCEXT='.src.tar.gz'/SRCEXT='.src.tar'/g" "$1"etc/makepkg.conf
	sed -i "s/#TotalDownload/TotalDownload/g" "$1"etc/pacman.conf
	sed -i "s/#Color/Color/g" "$1"etc/pacman.conf
	sed -i "s/# Misc options/# Misc options\nILoveCandy/" "$1"etc/pacman.conf
	sed -i "s/## Defaults specification/## Defaults specification\nDefaults insults/" "$1"etc/sudoers
}

reflector() {
	pacman -S --needed --noconfirm reflector
	reflector -c Canada -l 20 -a 12 -p https -f 10 --sort rate --save /etc/pacman.d/mirrorlist
	cat /etc/pacman.d/mirrorlist
}

pacstrap() {
	# Packages:      | Base Utils - Dev  | Kernels           | Firmware       | Root | Tree | Text | Ext 2 3 4 | WiFi           | Utils: exFat USB       | NTFS    | Microcode   | xInput      | Mirrors   | Download          |
	pacstrapPackages=('base' 'base-devel' 'linux' 'linux-lts' 'linux-firmware' 'sudo' 'tree' 'nano' 'e2fsprogs' 'networkmanager' 'exfat-utils' 'usbutils' 'ntfs-3g' 'intel-ucode' 'xorg-xinput' 'reflector' 'curl' 'wget' 'git')
	pacstrap "$rootMountDir" "${pacstrapPackages[@]}"
}

fstab() {
	genfstab -U "$rootMountDir" >> "$rootMountDir"/etc/fstab
	cat "$rootMountDir"/etc/fstab
}

setTimezone() {
	arch-chroot "$rootMountDir" ln -sf /usr/share/zoneinfo/"$myTimeZone" /etc/localtime
	arch-chroot "$rootMountDir" hwclock --systohc --utc
}

setLocale() {
	sed -i "s/^#$myLocale.UTF-8 UTF-8/$myLocale.UTF-8 UTF-8/g" "$rootMountDir"/etc/locale.gen
	arch-chroot "$rootMountDir" locale-gen
	echo "LANG=$myLocale.UTF-8" > "$rootMountDir"/etc/locale.conf
	echo "LANGUAGE=$myLocale:$myLocaleFallback:en" >> "$rootMountDir"/etc/locale.conf
}

setHostname() {
	echo "$hostname" > "$rootMountDir"/etc/hostname
}

setRootPass() {
	arch-chroot "$rootMountDir" sh -c "echo 'root:$rootpass' | chpasswd"
}

installSystemdBoot() {
	arch-chroot "$rootMountDir" bootctl --path="$efiMountDir" install
}

configSystemdBootHook() {
	arch-chroot "$rootMountDir" mkdir -p "$systemdBootHookFileDir"
	arch-chroot "$rootMountDir" touch "$systemdBootHookFileDir$systemdBootHookFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootHookFileDir$systemdBootHookFileName"
	echo "$systemdBootHook" > "$rootMountDir$systemdBootHookFileDir$systemdBootHookFileName"
}

configSystemdBootLoader() {
	arch-chroot "$rootMountDir" touch "$systemdBootLoaderFileDir$systemdBootLoaderFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootLoaderFileDir$systemdBootLoaderFileName"
	echo "$systemdBootLoader" > "$rootMountDir$systemdBootLoaderFileDir$systemdBootLoaderFileName"
}

configSystemdBootEntryArch() {
	arch-chroot "$rootMountDir" touch "$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
	echo "$systemdBootEntryArch" > "$rootMountDir$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
}

configSystemdBootEntryArchLts() {
	arch-chroot "$rootMountDir" touch "$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
	echo "$systemdBootEntryArchLts" > "$rootMountDir$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
}

configSystemdBoot() {
	configSystemdBootHook
	configSystemdBootLoader
	configSystemdBootEntryArch
	configSystemdBootEntryArchLts
}

enableNetworkManager() {
	arch-chroot "$rootMountDir" systemctl enable NetworkManager
}

createAdminUser() {
	arch-chroot "$rootMountDir" useradd -m -g users -G wheel -s /bin/bash "$username"
	sed -i 's/^# %wheel ALL=(ALL) ALL/ %wheel ALL=(ALL) ALL/g' "$rootMountDir"/etc/sudoers
}

setUserPass() {
	arch-chroot "$rootMountDir" sh -c "echo '$username:$userpass' | chpasswd"
}

enablePeriodicTRIM() {
	case "$drive" in
		"$solidStateDrive")
			arch-chroot "$rootMountDir" systemctl enable fstrim.timer;;
	esac
}

editFstab() {
	arch-chroot "$rootMountDir" nano /etc/fstab
}

postInstallCleanup() {
	cp /root/arch/*{kde,gnome,xfce,budgie,bedrock}* "$rootMountDir"/home/"$username"
	chmod +x "$rootMountDir"/home/"$username"/*
	rm -r /root/arch
}

finish() {
	while [[ ! "$unmountReboot" =~ ^[yYnN]$ ]]; do read -n1 -rp "Unmount and reboot: (y/n) : " unmountReboot && echo; done
	case "$unmountReboot" in
		y|Y )
			umount -R "$rootMountDir"
			reboot;;
		n|N )
			echo "Unmount : umount -R $rootMountDir"
			echo "Reboot  : reboot"
			exit 0;;
	esac
}

# Configuration Files

systemdBootHookFileDir="/etc/pacman.d/hooks/"
systemdBootHookFileName="systemd-boot.hook"
systemdBootHook="$(cat <<-EOT
	[Trigger]
	Type = Package
	Operation = Upgrade
	Target = systemd

	[Action]
	Description = Updating systemd-boot
	When = PostTransaction
	Exec = /usr/bin/bootctl update
EOT
)"

systemdBootLoaderFileDir="$efiMountDir/loader/"
systemdBootLoaderFileName="loader.conf"
systemdBootLoader="$(cat <<-EOT
	default arch
	timeout 0
	editor yes
	console-mode auto
	auto-entries 1
	auto-firmware 1
EOT
)"

systemdBootEntryArchFileDir="$rootMountDir$efiMountDir/loader/entries/"
systemdBootEntryArchFileName="arch.conf"
rootpartuuid=$(blkid -s PARTUUID -o value /dev/"$drive""$ospartition")
systemdBootEntryArch="$(cat <<-EOT
	title Arch Linux
	linux /vmlinuz-linux
	initrd /intel-ucode.img
	initrd /initramfs-linux.img
	options root=PARTUUID="$rootpartuuid" rw rootflags=noatime module_blacklist=psmouse quiet loglevel=0 systemd.show_status=0 rd.udev.log_priority=0 systemd.restore_state=0
EOT
)"

systemdBootEntryArchLtsFileDir="$rootMountDir$efiMountDir/loader/entries/"
systemdBootEntryArchLtsFileName="archlts.conf"
rootpartuuid=$(blkid -s PARTUUID -o value /dev/"$drive""$ospartition")
systemdBootEntryArchLts="$(cat <<-EOT
	title Arch Linux LTS
	linux /vmlinuz-linux-lts
	initrd /intel-ucode.img
	initrd /initramfs-linux-lts.img
	options root=PARTUUID="$rootpartuuid" rw module_blacklist=psmouse
EOT
)"

# Run (remove "read -r" when finished debugging)

scriptRoot && read -r
efiBoot && read -r
updateSysClock && read -r
ssdHdd && read -r
partitionDrive && read -r
inputVariables && read -r
formatEfiRoot && read -r
mountEfiRoot && read -r
pacmanCustom "/" && read -r
reflector && read -r
pacstrap && read -r
fstab && read -r
setTimezone && read -r
setLocale && read -r
setHostname && read -r
setRootPass && read -r
installSystemdBoot && read -r
configSystemdBoot && read -r
enableNetworkManager && read -r
createAdminUser && read -r
setUserPass && read -r
pacmanCustom "/mnt" && read -r
enablePeriodicTRIM && read -r
editFstab && read -r
postInstallCleanup && read -r
finish