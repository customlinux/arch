#!/bin/bash
set -o pipefail
IFS=$'\n\t'

# Variables
rootMountDir="/mnt"
efiMountDir="/boot"
myTimeZone="America/Vancouver"
myLocale="en_CA"
myLocaleFallback="en_US"
hardDiskDrive="sda"
solidStateDrive="nvme0n1p"

# Functions

scriptRoot() {
	if [[ "$EUID" -ne 0 ]]; then
		echo
		echo "Script is NOT being run as root."
		exit 1
	fi
}

efiBoot() {
	efiVarDir="1"
	[[ -d /sys/firmware/efi/efivars ]] && efiVarDir="0"
	if [[ "$efiVarDir" -eq 1 ]]; then
		echo
		efivar --list
		echo "Directory NOT found: /sys/firmware/efi/efivars"
		exit 1
	fi
}

updateSysClock() {
	timedatectl set-ntp true
}

statusDrivePart() {
	fdisk -l
	lsblk
	echo
}

ssdHdd() {
	rotational=$(cat /sys/block/sda/queue/rotational)
	case "$rotational" in
		0 )
			drive="$solidStateDrive";;
		1 )
			drive="$hardDiskDrive";;
	esac
}

partitionDrive() {
	statusDrivePart
	while [[ ! "$modifyDrive" =~ ^[yYnN]$ ]]; do read -n1 -rp "[ Create / Modify ] partitions: (y/n) : " modifyDrive && echo; done
		case "$modifyDrive" in
			y|Y )
				cfdisk /dev/"${drive//p}";;
			n|N )
				echo "Skipping"
				echo;;
		esac
}

inputVariablesOne() {
	echo
	read -rp "Enter system hostname : " hostname
	read -rp "Enter your username   : " username
	read -rp "Enter user password   : " userpass
	read -rp "Enter root password   : " rootpass
	echo
}

inputVariablesTwo() {
	statusDrivePart
	read -rp "efipartition # /dev/$drive# : " efipartition
	read -rp "ospartition  # /dev/$drive# : " ospartition
	echo
}

showEfiRootPartSelection() {
	lsblk
	echo
	echo "EFI  : /dev/$drive$efipartition"
	echo "Root : /dev/$drive$ospartition"
	echo
}

formatEfiRoot() {
	showEfiRootPartSelection
	while [[ ! "$yesnoformatefi" =~ ^[yYnN]$ ]]; do read -n1 -rp "Format efi partition: (y/n) : " yesnoformatefi && echo; done
	case "$yesnoformatefi" in
		y|Y )
			while [[ ! "$finalyesnoformatefi" =~ ^[yYnN]$ ]]; do read -n1 -rp "Are you sure: (y/n) : " finalyesnoformatefi && echo; done
			case "$finalyesnoformatefi" in
				y|Y )
					mkfs.fat -F32 /dev/"$drive""$efipartition";;
				n|N )
					echo "Skipping"
					echo;;
			esac;;
		n|N )
			echo "Skipping...";;
	esac
	mkfs.ext4 /dev/"$drive""$ospartition"
}

mountEfiRoot() {
	mount /dev/"$drive""$ospartition" "$rootMountDir"
	mkdir -p "$rootMountDir""$efiMountDir"
	mount /dev/"$drive""$efipartition" "$rootMountDir""$efiMountDir"
}

pacmanCustom() {
	sed -i "s/PKGEXT='.pkg.tar.xz'/PKGEXT='.pkg.tar'/g" "$1"etc/makepkg.conf
	sed -i "s/SRCEXT='.src.tar.gz'/SRCEXT='.src.tar'/g" "$1"etc/makepkg.conf
	sed -i "s/#TotalDownload/TotalDownload/g" "$1"etc/pacman.conf
	sed -i "s/#Color/Color/g" "$1"etc/pacman.conf
	sed -i "s/# Misc options/# Misc options\nILoveCandy/" "$1"etc/pacman.conf
	sed -i "s/## Defaults specification/## Defaults specification\nDefaults insults/" "$1"etc/sudoers
}

reflectorMirrors() {
	pacman -S --needed --noconfirm reflector
	echo
	echo "Getting fresh mirrors..."
	reflector -l 100 -a 24 -p https -f 50 --sort rate --save /etc/pacman.d/mirrorlist
	echo
}

runPacstrap() {
	# Packages:      | Base Utils - Dev  | Kernels           | Firmware       | Root | Tree | Text | Ext 2 3 4 | WiFi           | Utils: exFat USB       | NTFS    | Microcode   | xInput      | Mirrors   | Download          |
	pacstrapPackages=('base' 'base-devel' 'linux' 'linux-lts' 'linux-firmware' 'sudo' 'tree' 'nano' 'e2fsprogs' 'networkmanager' 'exfat-utils' 'usbutils' 'ntfs-3g' 'intel-ucode' 'xorg-xinput' 'reflector' 'curl' 'wget' 'git')
	pacstrap "$rootMountDir" "${pacstrapPackages[@]}"
}

fstab() {
	genfstab -U "$rootMountDir" >> "$rootMountDir"/etc/fstab
	cat "$rootMountDir"/etc/fstab
}

setTimezone() {
	arch-chroot "$rootMountDir" ln -sf /usr/share/zoneinfo/"$myTimeZone" /etc/localtime
	arch-chroot "$rootMountDir" hwclock --systohc --utc
}

setLocale() {
	sed -i "s/^#$myLocale.UTF-8 UTF-8/$myLocale.UTF-8 UTF-8/g" "$rootMountDir"/etc/locale.gen
	arch-chroot "$rootMountDir" locale-gen
	echo "LANG=$myLocale.UTF-8" > "$rootMountDir"/etc/locale.conf
	echo "LANGUAGE=$myLocale:$myLocaleFallback:en" >> "$rootMountDir"/etc/locale.conf
}

setHostname() {
	echo "$hostname" > "$rootMountDir"/etc/hostname
}

setRootPass() {
	arch-chroot "$rootMountDir" sh -c "echo 'root:$rootpass' | chpasswd"
}

installSystemdBoot() {
	arch-chroot "$rootMountDir" bootctl --path="$efiMountDir" install
}

configSystemdBootHook() {
	arch-chroot "$rootMountDir" mkdir -p "$systemdBootHookFileDir"
	arch-chroot "$rootMountDir" touch "$systemdBootHookFileDir$systemdBootHookFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootHookFileDir$systemdBootHookFileName"
	echo "$systemdBootHook" > "$rootMountDir$systemdBootHookFileDir$systemdBootHookFileName"
}

configSystemdBootLoader() {
	arch-chroot "$rootMountDir" touch "$systemdBootLoaderFileDir$systemdBootLoaderFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootLoaderFileDir$systemdBootLoaderFileName"
	echo "$systemdBootLoader" > "$rootMountDir$systemdBootLoaderFileDir$systemdBootLoaderFileName"
}

configSystemdBootEntryArch() {
	arch-chroot "$rootMountDir" touch "$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
	echo "$systemdBootEntryArch" > "$rootMountDir$systemdBootEntryArchFileDir$systemdBootEntryArchFileName"
}

configSystemdBootEntryArchLts() {
	arch-chroot "$rootMountDir" touch "$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
	arch-chroot "$rootMountDir" cat "$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
	echo "$systemdBootEntryArchLts" > "$rootMountDir$systemdBootEntryArchLtsFileDir$systemdBootEntryArchLtsFileName"
}

configSystemdBoot() {
	configSystemdBootHook
	configSystemdBootLoader
	configSystemdBootEntryArch
	configSystemdBootEntryArchLts
}

enableNetworkManager() {
	arch-chroot "$rootMountDir" systemctl enable NetworkManager
}

createAdminUser() {
	arch-chroot "$rootMountDir" useradd -m -g users -G wheel -s /bin/bash "$username"
	sed -i 's/^# %wheel ALL=(ALL) ALL/ %wheel ALL=(ALL) ALL/g' "$rootMountDir"/etc/sudoers
}

setUserPass() {
	arch-chroot "$rootMountDir" sh -c "echo '$username:$userpass' | chpasswd"
}

enablePeriodicTRIM() {
	case "$drive" in
		"$solidStateDrive")
			arch-chroot "$rootMountDir" systemctl enable fstrim.timer;;
	esac
}

editFstab() {
	arch-chroot "$rootMountDir" nano /etc/fstab
}

postInstallCleanup() {
	ls /root/arch
	cp /root/arch/*{kde,gnome,xfce,budgie,bedrock}* "$rootMountDir"/home/"$username"
	ls /root/arch
	ls /"$rootMountDir"/home/"$username"
	chmod +x "$rootMountDir"/home/"$username"/*
	rm -r /root/arch
}

finish() {
	while [[ ! "$unmountReboot" =~ ^[yYnN]$ ]]; do read -n1 -rp "Unmount and reboot: (y/n) : " unmountReboot && echo; done
	case "$unmountReboot" in
		y|Y )
			umount -R "$rootMountDir"
			reboot;;
		n|N )
			echo
			echo "Unmount : umount -R $rootMountDir"
			echo "Reboot  : reboot"
			echo
			exit 0;;
	esac
}

# Configuration Files

systemdBootHookFileDir="/etc/pacman.d/hooks/"
systemdBootHookFileName="systemd-boot.hook"
systemdBootHook="$(cat <<-EOT
	[Trigger]
	Type = Package
	Operation = Upgrade
	Target = systemd

	[Action]
	Description = Updating systemd-boot
	When = PostTransaction
	Exec = /usr/bin/bootctl update
EOT
)"

systemdBootLoaderFileDir="$efiMountDir/loader/"
systemdBootLoaderFileName="loader.conf"
systemdBootLoader="$(cat <<-EOT
	default arch
	timeout 0
	editor yes
	console-mode auto
	auto-entries 1
	auto-firmware 1
EOT
)"

systemdBootEntryArchFileDir="$efiMountDir/loader/entries/"
systemdBootEntryArchFileName="arch.conf"
rootpartuuid=$(blkid -s PARTUUID -o value /dev/"$drive""$ospartition")
systemdBootEntryArch="$(cat <<-EOT
	title Arch Linux
	linux /vmlinuz-linux
	initrd /intel-ucode.img
	initrd /initramfs-linux.img
	options root=PARTUUID="$rootpartuuid" rw rootflags=noatime module_blacklist=psmouse quiet loglevel=0 systemd.show_status=0 rd.udev.log_priority=0 systemd.restore_state=0
EOT
)"

systemdBootEntryArchLtsFileDir="$efiMountDir/loader/entries/"
systemdBootEntryArchLtsFileName="archlts.conf"
rootpartuuid=$(blkid -s PARTUUID -o value /dev/"$drive""$ospartition")
systemdBootEntryArchLts="$(cat <<-EOT
	title Arch Linux LTS
	linux /vmlinuz-linux-lts
	initrd /intel-ucode.img
	initrd /initramfs-linux-lts.img
	options root=PARTUUID="$rootpartuuid" rw module_blacklist=psmouse
EOT
)"

# Run (remove "read -r" when finished debugging)

scriptRoot
efiBoot
inputVariablesOne
updateSysClock
ssdHdd
partitionDrive
inputVariablesTwo
formatEfiRoot
mountEfiRoot
pacmanCustom "/"
reflectorMirrors
runPacstrap
fstab
setTimezone
setLocale
setHostname
setRootPass
installSystemdBoot
configSystemdBoot
enableNetworkManager
createAdminUser
setUserPass
pacmanCustom "/mnt/"
enablePeriodicTRIM
editFstab
postInstallCleanup && read -r
finish

# Debug
: '
set -e  : exits when any command fails
set -u  : exits when unset variables found
nounset : same as "set -u"
line 249: drive: unbound variable
line 261: drive: unbound variable

# setLocale is after runPacstrap #
perl : locale settings
	LANGUAGE = (unset)
	LC_ALL = (unset)
	LC_MESSAGES = ""



'