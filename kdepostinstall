#!/bin/bash
set -o pipefail
IFS=$'\n\t'

# Functions

configDisplaySettings() {
	mkdir -p /home/"$USER"/myScripts
	wget -P /home/"$USER"/myScripts https://raw.githubusercontent.com/customlinux/files/master/scripts/displaySetup.sh
	chmod +x /home/"$USER"/myScripts/displaySetup.sh
	/home/"$USER"/myScripts/displaySetup.sh
	sudo touch /usr/share/sddm/scripts/Xsetup
	displaySetupXsetup="$(cat <<-EOT
	/home/"$USER"/myScripts/displaySetup.sh
	EOT
	)"

	echo "$displaySetupXsetup" | sudo tee -a /usr/share/sddm/scripts/Xsetup # > /dev/null
}

automountPartitions() {
	while [[ ! "$mountPartitions" =~ ^[yYnN]$ ]]; do read -n1 -rp "Do you want to automount any partitions at startup? [y/n] : " mountPartitions && echo; done
	case $mountPartitions in
		y|Y)
			gnome-disks
			echo ;;
		n|N)
			echo "Skipping..."
			sudo pacman -Rns --noconfirm gnome-disk-utility
			echo ;;
	esac
}

# CUSTOM LAYOUTS + SOME PACKAGES"

installLatteApplets() {
	mkdir -p /home/"$USER"/myScripts
	wget -P /home/"$USER"/myScripts https://raw.githubusercontent.com/customlinux/files/master/scripts/updateGitInstalls.sh
	chmod +x /home/"$USER"/myScripts/updateGitInstalls.sh
	/home/"$USER"/myScripts/updateGitInstalls.sh
}

installLatteDockLayout() {
	wget -P /home/"$USER"/.config/latte https://raw.githubusercontent.com/customlinux/files/master/configs/LatteDock.layout.latte
}

configLatteDock() {
	installLatteApplets
	installLatteDockLayout
}

installSublimeText() {
	curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
	echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
	sudo pacman -Syu --noconfirm sublime-text
}

configKRunner() { # Not modular enough yet
	mkdir -p /home/"$USER"/myScripts
	kRunnerToggleFileDir="/home/$USER/myScripts/"
	kRunnerToggleFileName="krunnerToggle.sh"
	touch "$kRunnerToggleFileDir""$kRunnerToggleFileName"
	kRunnerToggle="$(cat <<-EOT
		#!/bin/bash
		krunnerWindow=$(xdotool getwindowfocus getwindowname)
		if [[ $krunnerWindow == *"krunner"* ]]; then
			xdotool key 'Escape'
			exit 0
		else
			qdbus org.kde.krunner /App display
			exit 0
		fi
	EOT
	)"

	echo "$kRunnerToggle" >> "$kRunnerToggleFileDir""$kRunnerToggleFileName"
	chmod +x "$kRunnerToggleFileDir""$kRunnerToggleFileName"

	echo "Follow the instructions below to create a custom global shortcut for KRunner."
	echo
	echo "System Settings > Shortcuts > Custom Shortcuts > Edit > New > Global Shortcut > Command/URL"
	echo "Name    : KRunner Toggle"
	echo "Comment : Run a script to get 'toggle' ability for KRunner."
	echo "Trigger : Ctrl+Alt+Shift+K"
	echo "Action  : /home/$USER/myScripts/krunnerToggle.sh"
	echo "Hit 'Apply' to SAVE CHANGES and CLOSE settings."
	echo
	echo "Press 'Enter' to open settings..."
	read -r
	systemsettings5 > /dev/null 2>&1
	echo
	echo "Press 'Enter' to continue..."
	read -r
	kRunnerScriptShortcutUUID=$(grep -A 2 Ctrl+Alt+Shift+K /home/"$USER"/.config/khotkeysrc | grep 'Uuid=' | grep -o '{.*}')
	kwriteconfig5 --file ~/.config/kwinrc --group ModifierOnlyShortcuts --key Meta "org.kde.kglobalaccel,/component/khotkeys,org.kde.kglobalaccel.Component,invokeShortcut,$kRunnerScriptShortcutUUID"
	qdbus org.kde.KWin /KWin reconfigure
}

configChromiumFlags() {
	chromiumFlagsFileDir="/home/$USER/.config/"
	chromiumFlagsFileName="chromium-flags.conf"
	touch "$chromiumFlagsFileDir""$chromiumFlagsFileName"
	chromiumFlags="$(cat <<-EOT
		# --password-store=<basic|gnome|kwallet>
		#--flag-switches-begin
		--enable-smooth-scrolling
		--enable-features=OverlayScrollbar,ParallelDownloading,SecurityInterstitialsDarkMode
		#AutomaticPasswordGeneration,FocusMode,UsernameFirstFlow,google-password-manager
		#--flag-switches-end
	EOT
	)"

	echo "$chromiumFlags" >> "$chromiumFlagsFileDir""$chromiumFlagsFileName"
}

configGit() {
	git config --global core.editor "subl -n -w"
	git config --global credential.helper 'cache --timeout=1800'
	git config --global core.autocrlf input
}

cleanUp() {
	sudo mkdir -p /home/"$USER"/Documents/Arch-Install
	sudo mv /home/"$USER"/*{gnome,kde,xfce,budgie,bedrock}* /home/"$USER"/Documents/Arch-Install
	sudo mv /home/"$USER"/.config/autostart/run*postinstall.desktop /home/"$USER"/Documents/Arch-Install
	echo
	echo "[ Installation scripts have been moved into directory '/home/$USER/Documents/Arch-Install'. ]"
	echo
	echo "[ OPTIONAL: Run /home/$USER/Documents/Arch-Install/kdecustomsettings to enable custom settings. ]"
}

rebootSystem() {
	while [[ ! "$yesnoreboot" =~ ^[yYnN]$ ]]; do read -n1 -rp "Reboot: (y/n) : " yesnoreboot && echo; done
	case "$yesnoreboot" in
		y|Y )
			sudo reboot;;
		n|N )
			echo
			echo "Reboot  : reboot"
			echo
			exit 0;;
	esac
}

# Install

configDisplaySettings
automountPartitions
configLatteDock
installSublimeText
configKRunner
configChromiumFlags
configGit
cleanUp
rebootSystem